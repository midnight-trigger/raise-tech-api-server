// Code generated by MockGen. DO NOT EDIT.
// Source: images.go

// Package mock_mysql is a generated GoMock package.
package mock_mysql

import (
	gomock "github.com/golang/mock/gomock"
	mysql "github.com/midnight-trigger/raise-tech-api-server/infra/mysql"
	reflect "reflect"
)

// MockIImages is a mock of IImages interface
type MockIImages struct {
	ctrl     *gomock.Controller
	recorder *MockIImagesMockRecorder
}

// MockIImagesMockRecorder is the mock recorder for MockIImages
type MockIImagesMockRecorder struct {
	mock *MockIImages
}

// NewMockIImages creates a new mock instance
func NewMockIImages(ctrl *gomock.Controller) *MockIImages {
	mock := &MockIImages{ctrl: ctrl}
	mock.recorder = &MockIImagesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIImages) EXPECT() *MockIImagesMockRecorder {
	return m.recorder
}

// FindById mocks base method
func (m *MockIImages) FindById(id int64) (mysql.Images, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(mysql.Images)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById
func (mr *MockIImagesMockRecorder) FindById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockIImages)(nil).FindById), id)
}

// Create mocks base method
func (m *MockIImages) Create(image *mysql.Images) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", image)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockIImagesMockRecorder) Create(image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIImages)(nil).Create), image)
}

// Update mocks base method
func (m *MockIImages) Update(oldParams mysql.Images, updateParams map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", oldParams, updateParams)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockIImagesMockRecorder) Update(oldParams, updateParams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIImages)(nil).Update), oldParams, updateParams)
}

// Delete mocks base method
func (m *MockIImages) Delete(image *mysql.Images) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", image)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockIImagesMockRecorder) Delete(image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIImages)(nil).Delete), image)
}
